plugins {
    id "com.moowork.node" version "1.2.0"
}

apply plugin: 'kotlin-platform-js'
apply plugin: 'kotlin-dce-js'

repositories {
    mavenCentral()
    jcenter()
}

kotlin {
    experimental.coroutines = "enable"
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-html-js:0.6.9"
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core-js:0.22.5'
    expectedBy project(":kthings-common")
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
}

compileKotlin2Js {
    //kotlinOptions.friendModulesDisabled =false
    //kotlinOptions.main = "call"
    //kotlinOptions.metaInfo = true
    kotlinOptions.moduleKind = "umd"
    //kotlinOptions.noStdlib = true
    //kotlinOptions.outputFile
    kotlinOptions.sourceMap = true
    kotlinOptions.sourceMapEmbedSources = "always"
    //kotlinOptions.sourceMapPrefix
    //kotlinOptions.target = "v5"
    //kotlinOptions.typedArrays = true
}

compileTestKotlin2Js {
    kotlinOptions.moduleKind = "commonjs"
    kotlinOptions.sourceMap = true
}

runDceKotlinJs.dceOptions.devMode = false
runDceTestKotlinJs.enabled = false

assemble.dependsOn(tasks.runDceKotlinJs)

clean {
    delete file("node_modules")
}

sourceSets.all { sourceSet ->
    tasks.create(sourceSet.getTaskName("unpack", "kotlinJsDependencies")) {
        group = "build"
        description = "Unpacks ${sourceSet.name} dependencies to a format Node.js can consume"

        def outputDir = new File(buildDir, name)
        inputs.property("classpath", sourceSet.runtimeClasspath)
        outputs.dir(outputDir)

        doLast {
            copy {
                into(outputDir)
                include "*.js"
                include "*.js.map"
                sourceSet.compileClasspath.filter { it.name.endsWith(".jar") }.forEach { thisJar ->
                    from zipTree(thisJar)
                }
            }
        }
    }
}

node {
    download = true
    version = "8.11.1"
}

task runJS(dependsOn: [compileKotlin2Js, unpackKotlinJsDependencies, yarn], type: NodeTask) {
    inputs.files sourceSets.main.output
    group = "application"
    description = "Run JS application without optimisation"
    options = ["-r", "source-map-support/register"]
    script = compileKotlin2Js.outputFile
    execOverrides {
        it.environment("NODE_PATH", new File(buildDir, "unpackKotlinJsDependencies").toString())
    }
}

task runDceJS(dependsOn: [runDceKotlinJs, yarn], type: NodeTask) {
    group = "application"
    description = "Run JS application, after applying dead-code elimination"
    options = ["-r", "source-map-support/register"]
    script = new File(buildDir, "kotlin-js-min/main/${archivesBaseName}.js")
    execOverrides {
        def elements = [
                new File(buildDir, "kotlin-js-min/main")
        ]
        logger.info("NODE_PATH=${elements.collect { it.toString() }.join(":")}")
        it.environment("NODE_PATH", elements.collect { it.toString() }.join(":"))
    }
}

task suppressMainCall(type: Copy, dependsOn: [compileKotlin2Js]) {
    def outputDir = new File(buildDir, name)

    from(sourceSets.main.output)
    into(outputDir)
    include "${archivesBaseName}.js"
    include "${archivesBaseName}.js.map"
    filter { line ->
        if (line.contains("main([]);")) {
            "// /* removed by suppressMainCall */ $line"
        }
        else {
            line
        }
    }
}

task mochaTest(type: NodeTask, dependsOn: [unpackTestKotlinJsDependencies, yarn, suppressMainCall, testClasses]) {
    def testOutputDir = new File(buildDir, "test-results/${name}")
    inputs.files unpackTestKotlinJsDependencies
    inputs.files suppressMainCall
    inputs.files compileTestKotlin2Js.outputFile
    outputs.dir testOutputDir

    group = "verification"
    description = "Run Mocha tests"
    script = file('node_modules/mocha/bin/mocha')
    args = ["--reporter", "mocha-jenkins-reporter", "-r", "source-map-support/register", compileTestKotlin2Js.outputFile]
    execOverrides {
        def elements = [
                new File(buildDir, "unpackTestKotlinJsDependencies"),
                new File(buildDir, "suppressMainCall")
        ]
        logger.info("NODE_PATH=${elements.collect { it.toString() }.join(":")}")
        it.environment("NODE_PATH", elements.collect { it.toString() }.join(":"))
        it.environment("JUNIT_REPORT_PATH", "${testOutputDir}/test-reports.xml")
        it.environment("JUNIT_REPORT_STACK", "1")
    }
}

check.dependsOn(mochaTest)
